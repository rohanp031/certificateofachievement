{
  "version": 3,
  "sources": [
    "C:/Users/podda/certificateofachievement/projects/certificateofachievement/smart_contracts/certificateofachievement/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAGuC;AAAyB;AAA9D;AACmC;AAAuB;AAA1D;AAFF;;AAAA;;;AAAA;;;;;;AAAA;;;AAAA;;;;AAAA;;;AAIE;;AAAA;AAAA;AAAA;;AAAA;AAJF;;;AAAA;;;AAAA;;;AAAA;;;AAIE;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;;AAJF;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;AAIE;;;AAHqC;AAInC;;AAAA;AAHiC;AAIjC;;AAAA;AACO;;;;;;;;;;;;;;;AAAA;;AAAA;AAAyB;;;;;;;AAAzB;AAAA;;AAAA;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "bytecblock \"student\" \"none\" \"award\""
    },
    "22": {
      "op": "txn ApplicationID",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "reinterpret_bool%0#0"
      ]
    },
    "24": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "27": {
      "op": "bytec_0 // \"student\"",
      "defined_out": [
        "\"student\""
      ],
      "stack_out": [
        "\"student\""
      ]
    },
    "28": {
      "op": "bytec_1 // \"none\"",
      "defined_out": [
        "\"none\"",
        "\"student\""
      ],
      "stack_out": [
        "\"student\"",
        "\"none\""
      ]
    },
    "29": {
      "op": "app_global_put",
      "stack_out": []
    },
    "30": {
      "op": "bytec_2 // \"award\"",
      "defined_out": [
        "\"award\""
      ],
      "stack_out": [
        "\"award\""
      ]
    },
    "31": {
      "op": "bytec_1 // \"none\"",
      "stack_out": [
        "\"award\"",
        "\"none\""
      ]
    },
    "32": {
      "op": "app_global_put",
      "stack_out": []
    },
    "33": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "35": {
      "op": "bz main_bare_routing@8",
      "stack_out": []
    },
    "38": {
      "op": "pushbytes 0x2c8c7e0b // method \"issueCert(string,string)string\"",
      "defined_out": [
        "Method(issueCert(string,string)string)"
      ],
      "stack_out": [
        "Method(issueCert(string,string)string)"
      ]
    },
    "44": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(issueCert(string,string)string)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(issueCert(string,string)string)",
        "tmp%2#0"
      ]
    },
    "47": {
      "op": "match main_issueCert_route@5",
      "stack_out": []
    },
    "51": {
      "block": "main_after_if_else@12",
      "stack_in": [],
      "op": "pushint 0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "53": {
      "op": "return",
      "stack_out": []
    },
    "54": {
      "block": "main_issueCert_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "56": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "57": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "58": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "60": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "61": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "64": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "67": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "70": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "73": {
      "callsub": "smart_contracts/certificateofachievement/contract.algo.ts::Certificate.issueCert",
      "op": "callsub issueCert",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "76": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "77": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "78": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "as_bytes%0#0"
      ]
    },
    "79": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length_uint16%0#0"
      ]
    },
    "82": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ]
    },
    "83": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "84": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "90": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ]
    },
    "91": {
      "op": "concat",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "92": {
      "op": "log",
      "stack_out": []
    },
    "93": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "95": {
      "op": "return",
      "stack_out": []
    },
    "96": {
      "block": "main_bare_routing@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "98": {
      "op": "bnz main_after_if_else@12",
      "stack_out": []
    },
    "101": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "103": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "104": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "105": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "107": {
      "op": "return",
      "stack_out": []
    },
    "108": {
      "subroutine": "smart_contracts/certificateofachievement/contract.algo.ts::Certificate.issueCert",
      "params": {
        "name#0": "bytes",
        "award#0": "bytes"
      },
      "block": "issueCert",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "111": {
      "op": "bytec_0 // \"student\"",
      "defined_out": [
        "\"student\""
      ],
      "stack_out": [
        "\"student\""
      ]
    },
    "112": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"student\"",
        "name#0 (copy)"
      ],
      "stack_out": [
        "\"student\"",
        "name#0 (copy)"
      ]
    },
    "114": {
      "op": "app_global_put",
      "stack_out": []
    },
    "115": {
      "op": "bytec_2 // \"award\"",
      "defined_out": [
        "\"award\""
      ],
      "stack_out": [
        "\"award\""
      ]
    },
    "116": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"award\"",
        "award#0 (copy)"
      ],
      "stack_out": [
        "\"award\"",
        "award#0 (copy)"
      ]
    },
    "118": {
      "op": "app_global_put",
      "stack_out": []
    },
    "119": {
      "op": "pushbytes \"Certificate: \"",
      "defined_out": [
        "\"Certificate: \""
      ],
      "stack_out": [
        "\"Certificate: \""
      ]
    },
    "134": {
      "op": "frame_dig -2",
      "stack_out": [
        "\"Certificate: \"",
        "name#0 (copy)"
      ]
    },
    "136": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "137": {
      "op": "pushbytes \" got \"",
      "defined_out": [
        "\" got \"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\" got \""
      ]
    },
    "144": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "145": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%1#0",
        "award#0 (copy)"
      ]
    },
    "147": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "148": {
      "retsub": true,
      "op": "retsub"
    }
  }
}